#!/bin/bash

echo "sudo started"

# http://stackoverflow.com/a/21295806/1641422
echo "checking admin"
fsutil dirty query $SYSTEMDRIVE >/dev/null 2>&1
ret=$?
if [ $ret -eq 127 ]; then
	echo "err127"
	# http://stackoverflow.com/a/28268802
	fltmc >/dev/null 2>&1
	ret=$?
fi
if [ $ret -eq 0 ]; then
	echo "root already"
	exec $*
fi

echo "checking args"
command_to_run="$*"
if [ -z "$command_to_run" ]; then
	echo "Usage: sudo command"
	echo "Runs command with administrator privileges."
	exit
fi

echo "checking WSL"
if [ "$MSYSTEM" == "" ]; then
	echo "sudo does not support current terminal" >&2
	echo "Please try again in git bash" >&2
	exit 1
fi

# Convert to Windows path
sudo_dir="$(realpath $(dirname $0))"
backend="$sudo_dir/sudobackend"
echo "backend: $backend"

fifoid="/tmp/.sudo.$RANDOM"
mkfifo "$fifoid.finish"
mkfifo "$fifoid.pidf"
mkfifo "$fifoid.sigint"
echo "created fifos: $fifoid"

echo "$command_to_run" >"$fifoid.command"

# Create fifos
for fd in 0 1 2; do
	if [ -t $fd ]; then
		# Terminal
		echo "/proc/$$/fd/$fd" >"$fifoid.fd$fd"
	else
		# Not terminal
		mkfifo "$fifoid.pipe$fd"
		echo "$fifoid.pipe$fd" >"$fifoid.fd$fd"
	fi
done
echo "created io fifos"

function clean {
	echo "cleaning"
	rm "$fifoid.finish" "$fifoid.sigint" "$fifoid.pidf" "$fifoid.command"

	# Remove stdin/stdout/stderr
	for fd in 0 1 2; do
		if [ ! -t $fd ]; then
			rm "$fifoid.pipe$fd"
		fi
		rm "$fifoid.fd$fd"
	done
	echo "cleaning done"
}
trap clean EXIT

echo "set traps"

# Run command
powershell.exe Start-Process \"$(cygpath -w /bin/)bash\" \"$backend\", \"$fifoid\", \"$(pwd)\" -Verb RunAs -WindowStyle Hidden 2>/dev/null
if [ $? -ne 0 ]; then
	echo "UAC elevation was canceled" >&2
	exit 1
fi
echo "started powershell"

# Get pid
pid=$(cat "$fifoid.pidf")
echo "pid: $pid"

# Wait
trap "echo 1 >\"$fifoid.sigint\" && sleep 0.1" SIGINT
echo "set SIGINT trap"

# Pass stdin fifo
if [ ! -t 0 ]; then
	( cat <&3 >"$fifoid.pipe0" & ) 3<&0
fi
echo "passed stdin"

# Cat stdout and stderr
for fd in 1 2; do
	if [ ! -t $fd ]; then
		cat "$fifoid.pipe1" &
	fi
done
echo "passed stdout&stderr"

while true; do
	res=$(cat "$fifoid.finish")
	echo "got: $res"
	if [ ! -z "$res" ]; then
		break
	fi
done
echo "finished"